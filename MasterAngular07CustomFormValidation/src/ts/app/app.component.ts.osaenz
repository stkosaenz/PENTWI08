import { Component, Directive, forwardRef } from "@angular/core";
import { FormControl, NG_ASYNC_VALIDATORS, AbstractControl, AsyncValidator } from "@angular/forms";
// import { FormControl, Validators, NG_VALIDATORS, AbstractControl } from "@angular/forms";
import { Books } from "./services/books";
import { Observable } from "rxjs";

export interface AddressData {
    street: string;
    city: string;
    state: string;
    zipCode: string;
}

import { Geocoding } from "./services/geocoding";
import { STATES, States } from "./services/states";

// const phoneNumberValidator = (control: FormControl) => {
//     const re = new RegExp("^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$");
//     if (control.value == null || String(control.value).length === 0) {
//         return null;
//     }

//     if (!re.test(control.value)) {
//         return {
//             phoneNumber: true,
//         };
//     }

//     return null;
// };

const validateBookIdFactory = (books: Books) => {
    return (c: AbstractControl) => {
        if (c.value == null || String(c.value).length === 0) {
            return Promise.resolve(null);
        }

        return new Promise((resolve, reject) => {
            books.getBook(Number(c.value)).subscribe(() => {
                resolve(null);
            }, () => {
                resolve({ bookId: true });
            });
        });
    };
};

const selectors = [
    "input[type=tel][ngModel]",
    "input[type=tel][formControl]",
    "input[type=tel][formControlName]",
    "[phone-number][ngModel]",
    "[phone-number][formControl]",
    "[phone-number][formControlName]",
];

@Directive({
    selector: "[valid-book-id][ngModel]",
    providers: [
        { provide: NG_ASYNC_VALIDATORS, useExisting: forwardRef(() => BookIdValidatorDirective), multi: true },
    ],
})
export class BookIdValidatorDirective implements AsyncValidator {
    private validator: (c: AbstractControl) => Promise<any> | Observable<any>;
    constructor(private books: Books) {
        this.validator = validateBookIdFactory(this.books);
    }

    public validate(c: AbstractControl) {
        return this.validator(c);
    }
}
// @Directive({
//     selector: selectors.join(","),
//     providers: [
//         { provide: NG_VALIDATORS, useValue: , multi: true },
//     ],
// })

// export class PhoneNumberValidatorDirective { }

@Component({
    selector: "main",
    styles: [
        "input.ng-valid ~ span { display: none; }",
    ],
    template: `
        <div>
            <label for="book-id-input">Book Id:</label>
            <input type="tel" id="book-id-input" valid-book-id [(ngModel)]="bookId">
            <span>
                Book Id is not valid.
            </span>
            <!--
            <input type="tel" id="book-id-input" [formControl]="bookIdInput">
            <span>
                Book Id is not valid.
            </span>
            <label for="phone-number-input">Phone Number:</label>
            <input type="tel" id="phone-number-input" [(ngModel)]="phoneNumber">
            <span>
                Phone number is not valid.
            </span>
            <input type="tel" id="phone-number-input" [formControl]="phoneNumber">
            <span *ngIf="phoneNumberInput.errors?.phoneNumber">
                Phone number is not valid
            </span>
            <span *ngIf="phoneNumberInput.errors?.required">
                Phone numbeer is required
            </span> -->
        </div>
    `,
})
export class AppComponent {
    // public phoneNumberInput = new FormControl("", [phoneNumberValidator, Validators.required]);
    // public bookIdInput = new FormControl("", null, validateBookId(this.books));

    // constructor(private books: Books) {
    //     console.log(this.books);
    // }
}
